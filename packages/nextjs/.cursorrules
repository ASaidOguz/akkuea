# .cursorrules
# Cursor Usage Guidelines for Akkuea's Next.js Frontend
# -----------------------------------------------------
# Purpose:
# This file defines standardized cursor behavior across the frontend.
# Following these rules ensures consistent UX, accessibility, and visual clarity
# throughout the educational tools and social network features of Akkuea.

üåê General Guidelines
- Always choose cursors that match the user‚Äôs intention and interaction.
- Cursor feedback must enhance usability, not distract users.
- Cursor changes should only occur on interactive elements.

üñ±Ô∏è Cursor Rules by Context

1. BUTTONS & CLICKABLE ELEMENTS
cursor: pointer;
Description: Apply to all <button>, clickable <div>, or <span> with onClick, unless disabled.

2. DISABLED ELEMENTS
cursor: not-allowed;
Description: Use for disabled buttons or links to clearly signal inaccessibility.

3. DRAGGABLE CONTENT
cursor: grab; (default) ‚Üí cursor: grabbing; (on drag)
Description: Use on cards or components that support drag-and-drop (e.g., for resource rearrangement).

4. TEXT CONTENT & INPUTS
cursor: text;
Description: Apply to form fields, inputs, and editable text areas.

5. ZOOM OR MEDIA INTERACTIONS
cursor: zoom-in; or cursor: zoom-out;
Description: Use for image/video elements where zoom interaction is supported.

6. LOADING STATES
cursor: wait; or cursor: progress;
Description: Use when an action is processing, especially after resource-heavy requests.

7. CUSTOM INTERACTIONS (e.g., tools, canvas elements)
cursor: crosshair; or cursor: cell; depending on UX context
Description: For future interactive visual tools (e.g., drawing, visual resource placement).

üõë Don'ts
- ‚ùå Don‚Äôt use custom cursors that don‚Äôt enhance clarity.
- ‚ùå Don‚Äôt change cursor for non-interactive elements.
- ‚ùå Avoid using 'none' unless for special full-screen custom UI cases.

üìò Best Practices
- Define cursor styles via class utilities (e.g., Tailwind or SCSS modules) to ensure reusability.
- If creating interactive components, define hover/active states in the same file for maintainability.
- For dynamic cursors (like grab/zoom), use useState/useEffect or libraries like `react-use-gesture` only if needed.
- Keep accessibility in mind: always use semantic HTML where possible (button, a, input, etc).

üß± Project-Specific Note:
Since Akkuea is an education platform with downloadable and interactive content, clear cursor feedback is key to making the platform intuitive for all users across devices.

üìå Maintainers Note:
Feel free to extend these rules as the app grows (e.g., mobile cursor fallback rules, accessibility enhancements, AR/VR support).

# Version: 1.0 | Maintained by: Akkuea Frontend Team
